
db_integration_test: &db_integration_test
    steps:
      - checkout

      - run:
          name: Wait for db
          command: |
            if [ ! -z "$DATABASE_ADDR" ]; then
              dockerize -wait tcp://$DATABASE_ADDR -timeout 1m
            fi

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "base/vendor/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r base/vendor/requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "base/vendor/requirements.txt" }}
      - run:
          name: Unit tests
          command: |
            . venv/bin/activate
            cd loudml
            make unittest unittests="$UNITTESTS"
          environment:
            RANDOM_SEED: 10
            PYTHONHASHSEED: 0

db_coverage_test: &db_coverage_test
    steps:
      - checkout

      - run:
          name: Wait for db
          command: |
            if [ ! -z "$DATABASE_ADDR" ]; then
              dockerize -wait tcp://$DATABASE_ADDR -timeout 1m
            fi

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "base/vendor/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r base/vendor/requirements.txt
            pip install nose
            pip install coverage
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "base/vendor/requirements.txt" }}
      - run:
          name: Coverage tests
          command: |
            . venv/bin/activate
            cd loudml
            unittests="$UNITTESTS" make coverage
            mv .coverage .coverage.$CIRCLE_JOB
          environment:
            RANDOM_SEED: 10
            PYTHONHASHSEED: 0
      - persist_to_workspace:
          root: ~/repo/loudml
          paths:
            - .coverage.*

es_unit_test: &es_unit_test
    environment:
      UNITTESTS: tests/test_elastic.py
      ELASTICSEARCH_ADDR: localhost:9200
      DATABASE_ADDR: localhost:9200
    working_directory: ~/repo
    <<: *db_integration_test

mongo_unit_test: &mongo_unit_test
    environment:
      UNITTESTS: tests/test_mongo.py
      MONGODB_DB: localhost:27017
      DATABASE_ADDR: localhost:27017
    working_directory: ~/repo
    <<: *db_integration_test

warp_unit_test: &warp_unit_test
    environment:
      UNITTESTS: tests/test_warp10.py
      WARP10_URL: http://127.0.0.1:8080/api/v0
      WARP10_READ_TOKEN: readTokenCI
      WARP10_WRITE_TOKEN: writeTokenCI
      DATABASE_ADDR: 127.0.0.1:8080
    working_directory: ~/repo
    <<: *db_integration_test

influx_unit_test: &influx_unit_test
    environment:
      UNITTESTS: tests/test_influx.py
      INFLUXDB_ADDR: localhost:8086
      DATABASE_ADDR: localhost:8086
    working_directory: ~/repo
    <<: *db_integration_test

es_coverage_test: &es_coverage_test
    environment:
      UNITTESTS: tests/test_elastic.py
      ELASTICSEARCH_ADDR: localhost:9200
      DATABASE_ADDR: localhost:9200
    working_directory: ~/repo
    <<: *db_coverage_test

mongo_coverage_test: &mongo_coverage_test
    environment:
      UNITTESTS: tests/test_mongo.py
      MONGODB_DB: localhost:27017
      DATABASE_ADDR: localhost:27017
    working_directory: ~/repo
    <<: *db_coverage_test

warp_coverage_test: &warp_coverage_test
    environment:
      UNITTESTS: tests/test_warp10.py
      WARP10_URL: http://127.0.0.1:8080/api/v0
      WARP10_READ_TOKEN: readTokenCI
      WARP10_WRITE_TOKEN: writeTokenCI
      DATABASE_ADDR: 127.0.0.1:8080
    working_directory: ~/repo
    <<: *db_coverage_test

influx_coverage_test: &influx_coverage_test
    environment:
      UNITTESTS: tests/test_influx.py
      INFLUXDB_ADDR: localhost:8086
      DATABASE_ADDR: localhost:8086
    working_directory: ~/repo
    <<: *db_coverage_test


version: 2
jobs:
  test-elastic6:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:6.6.1
    <<: *es_unit_test

  test-elastic5:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:5.6.15
    <<: *es_unit_test

  test-mongo4:
    docker:
      - image: circleci/python:3.6.1
      - image: mongo:4.1.13
    <<: *mongo_unit_test

  test-warp10:
    docker:
      - image: circleci/python:3.6.1
      - image: warp10io/warp10:2.0.3-ci
    <<: *warp_unit_test

  test-influx1:
    docker:
      - image: circleci/python:3.6.1
      - image: influxdb:1.7.4
    <<: *influx_unit_test


  coverage-elastic6:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:6.6.1
    <<: *es_coverage_test

  coverage-elastic5:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:5.6.15
    <<: *es_coverage_test

  coverage-mongo4:
    docker:
      - image: circleci/python:3.6.1
      - image: mongo:4.1.13
    <<: *mongo_coverage_test

  coverage-warp10:
    docker:
      - image: circleci/python:3.6.1
      - image: warp10io/warp10:2.0.3-ci
    <<: *warp_coverage_test

  coverage-influx1:
    docker:
      - image: circleci/python:3.6.1
      - image: influxdb:1.7.4
    <<: *influx_coverage_test


  test-go:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/regel/loudml
    steps:
      - checkout

      - restore_cache:
          key: dep-0.5.0
      - run:
          name: 'Download Go dependencies tool'
          command: |
            cd /tmp
            wget -N https://github.com/golang/dep/releases/download/v0.5.0/dep-linux-amd64
            chmod +x /tmp/dep-linux-amd64
      - save_cache:
          name: 'dep-0.5.0'
          key: dep-0.5.0
          paths:
            - '/tmp/dep'

      - restore_cache:
          key: telemetry-vendor-{{ checksum "telemetry/Gopkg.lock" }}
      - run: 'cd telemetry && /tmp/dep-linux-amd64 ensure -v --vendor-only'
      - save_cache:
          name: 'telemetry vendored deps'
          key: telemetry-vendor-{{ checksum "telemetry/Gopkg.lock" }}
          paths:
            - 'telemetry/vendor'

      - run: 'cd telemetry && make test'

  test-python-unit:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "base/vendor/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r base/vendor/requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "base/vendor/requirements.txt" }}
      - run:
          name: Unit tests
          command: |
            . venv/bin/activate
            cd loudml
            make unittest
          environment:
            RANDOM_SEED: 10
            PYTHONHASHSEED: 0

  test-python-coverage:
    docker:
      - image: circleci/python:3.6.1
    environment:
      UNITTESTS: tests/
    working_directory: ~/repo
    <<: *db_coverage_test

  combine-coverage:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - checkout

      - run:
          name: Install coverage tool
          command: |
            sudo pip install coverage

      - run:
          name: Coverage tests
          command: |
            cd /tmp/workspace
            coverage combine
            coverage xml -i

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - coverage.xml

  test-sonar:
    docker:
      - image: circleci/openjdk:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - checkout

      - run:
          name: Install sonar-scanner
          command: |
            sudo apt-get install -y unzip
            sudo apt-get install -y curl
            curl --insecure -O -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
            unzip sonar-scanner-cli-3.3.0.1492-linux.zip

      - run:
          name: Sonar tests
          command: |
            sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner \
              -Dsonar.projectKey=regel_loudml \
              -Dsonar.organization=regel-github \
              -Dsonar.sources=loudml \
              -Dsonar.python.coverage.reportPath=/tmp/workspace/coverage.xml \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=$SONAR_API_KEY

  deploy_docs:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/tmp
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libpath-tiny-perl libdigest-perl-md5-perl libxml2-utils xsltproc
      - add_ssh_keys:
          fingerprints:
            - "fe:f4:5e:6b:19:bc:81:6d:19:0c:ae:76:39:a0:c1:ff"
      - run:
          name: Clone loudml-docs repo
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            git clone git@github.com:regel/loudml-docs
      - run:
          name: Build and commit
          command: |
            cd loudml-docs
            ./build_docs.pl --all
            git config user.email "packaging@loudml.io"
            git config user.name "circleci"
            git checkout -B ${CIRCLE_BRANCH}
            git add html
            if LC_ALL=C git status|grep "Untracked files\|modified"; then
              git commit -m "Update html. Deployed to netlify.com"
              if [ "$CIRCLE_BRANCH" != "master" ]; then
                git push -f origin ${CIRCLE_BRANCH}
              else
                git push origin master
              fi
            fi
            zip -r html.zip html
      - store_artifacts:
          path: ~/tmp/loudml-docs/html.zip
          destination: html.zip

workflows:
  version: 2
  check-datasources:
    jobs:
      - test-elastic6
      - test-elastic5
      - test-mongo4
      - test-warp10
      - test-influx1
  doc:
    jobs:
      - deploy_docs
  check:
    jobs:
      - test-go
      - test-python-unit

  nightly@master:
    jobs:
      - test-python-coverage
      - coverage-elastic6
      - coverage-elastic5
      - coverage-mongo4
      - coverage-warp10
      - coverage-influx1
      - combine-coverage:
          requires:
            - test-python-coverage
            - coverage-elastic6
            - coverage-elastic5
            - coverage-mongo4
            - coverage-warp10
            - coverage-influx1
      - test-sonar:
          requires:
            - combine-coverage

    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - master
