version: 2.1

executors:
  ruby:
    docker:
      - image: circleci/ruby:2.3-jessie

commands:
  build_deb:
    parameters:
      distro:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && \
                sudo apt-get install -y devscripts build-essential lintian reprepro && \
                sudo apt-get install -y dh-systemd git && \
                sudo apt-get install -y python-all python-setuptools python3-pip python3-all python3-setuptools python3-venv
      - run:
          name: Install dh-virtualenv from Spotify sources
          environment:
            DEBIAN_FRONTEND: noninteractive
          command: |
            sudo apt-get install -y python-sphinx python-mock dh-exec python-sphinx-rtd-theme
            git clone https://github.com/spotify/dh-virtualenv.git
            cd dh-virtualenv/ && \
                sudo mk-build-deps -ri && \
                dpkg-buildpackage -us -uc -b && \
                sudo dpkg -i ../dh-virtualenv_*_all.deb
            dh_virtualenv --version
      - run:
          name: Run make
          command: |
            make deb
            mkdir -p /tmp/debs/<< parameters.distro >>
            cp ~/loudml*.deb /tmp/debs/<< parameters.distro >>
      - store_artifacts:
          path: /tmp/debs
          destination: packages
      - persist_to_workspace:
          root: /tmp/debs
          paths:
            - << parameters.distro >>

  publish_deb:
    parameters:
      distro:
        type: string
      os:
        type: string
    steps:
      - attach_workspace:
          at: ~/debs
      - run:
          name: Install packagecloud CLI
          command: gem install package_cloud
      - run:
          name: Push deb package
          command: |
            package_cloud push loudml/loudml/<< parameters.os >>/<< parameters.distro >> \
                ~/debs/<< parameters.distro >>/*.deb


docker_deploy: &docker_deploy
  requires:
    - build

target_cpu: &target_cpu
  extras_require: "cpu"
  base_image: "debian:stretch-slim"
  gpu: "false"

target_noavx: &target_noavx
  extras_require: "none"
  base_image: "loudml/tensorflow:1.13.2-noavx-py3"
  gpu: "false"

target_gpu: &target_gpu
  extras_require: "none"
  base_image: "tensorflow/tensorflow:1.13.2-gpu-py3"
  gpu: "true"


workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - debuild_stretch
      - debuild_buster
      - debuild_xenial
      - debuild_bionic
      - publish_debs:
          context: package-cloud
          requires:
            - test-python-unit
            - debuild_stretch
            - debuild_buster
            - debuild_xenial
            - debuild_bionic
          filters:
            branches:
              only: develop
      - test-python-unit
      - test-python-coverage
      - coverage-elastic6
      - coverage-elastic5
      - coverage-mongo4
      - coverage-warp10
      - coverage-influx1
      - combine-coverage:
          requires:
            - test-python-coverage
            - coverage-elastic6
            - coverage-elastic5
            - coverage-mongo4
            - coverage-warp10
            - coverage-influx1
      - test-sonar:
          requires:
            - combine-coverage
      - deploy:
          name: "Deploy loudml/loudml:nightly"
          <<: *target_cpu
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: nightly
          filters:
            branches:
              only: develop
      - deploy:
          name: "Deploy loudml/loudml:nightly-noavx"
          <<: *target_noavx
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: nightly-noavx
          filters:
            branches:
              only: develop
      - deploy:
          name: "Deploy loudml/loudml:nightly-gpu"
          <<: *target_gpu
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: nightly-gpu
          filters:
            branches:
              only: develop

  main:
    jobs:
      - test-elastic7
      - test-elastic6
      - test-elastic5
      - test-mongo4
      - test-warp10
      - test-influx1
      - test-opentsdb
      - test-go
      - test-python-unit
      - build:
          name: "Build CPU image"
          <<: *target_cpu
          requires:
            - test-python-unit
          filters:
            tags:
              only:
                /.*/
      - build:
          name: "Build NOAVX image"
          <<: *target_noavx
          requires:
            - test-python-unit
          filters:
            tags:
              only:
                /.*/
      - build:
          name: "Build GPU image"
          <<: *target_gpu
          requires:
            - test-python-unit
          filters:
            tags:
              only:
                /.*/

  release:
    jobs:
      - test-python-unit
      - deploy:
          name: "Deploy loudml/loudml:rc"
          <<: *target_cpu
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: rc
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\S*)([a|rc|beta]([0-9]+))+$/
      - deploy:
          name: "Deploy loudml/loudml:latest"
          <<: *target_cpu
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: latest
          release: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/
      - deploy:
          name: "Deploy loudml/loudml:rc-noavx"
          <<: *target_noavx
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: rc-noavx
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\S*)([a|rc|beta]([0-9]+))+$/
      - deploy:
          name: "Deploy loudml/loudml:latest-noavx"
          <<: *target_noavx
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: latest-noavx
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/
      - deploy:
          name: "Deploy loudml/loudml:rc-gpu"
          <<: *target_gpu
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: rc-gpu
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\S*)([a|rc|beta]([0-9]+))+$/
      - deploy:
          name: "Deploy loudml/loudml:latest-gpu"
          <<: *target_gpu
          <<: *docker_deploy
          requires:
            - test-python-unit
          tag: latest-gpu
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/


  doc:
    jobs:
      - deploy_docs:
          filters:
            branches:
              only: master


ALIASES:
  - &restore_cache
    restore_cache:
      keys:
        - v1-{{ .Branch }}
      paths:
        - /caches/app.tar
  - &docker_load
    run:
      name: Load Docker image layer cache
      command: |
        set +o pipefail
        docker load -i /caches/app.tar | true
  - &docker_build
    run:
      name: Build application Docker image
      command: |
        docker build --cache-from=app \
            --build-arg extras_require=<< parameters.extras_require >> \
            --build-arg base_image=<< parameters.base_image >> \
            --build-arg gpu=<< parameters.gpu >> \
            -t app .
  - &docker_save
    run:
      name: Save Docker image layer cache
      command: |
        mkdir -p /caches
        docker save -o /caches/app.tar app
  - &save_cache
    save_cache:
      key: v1-{{ .Branch }}-{{ epoch }}
      paths:
        - /caches/app.tar
  - &local_venv
    run:
      name: Install local virtualenv
      command: |
        python3 -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install .[dev,cpu]


db_integration_test: &db_integration_test
    steps:
      - checkout

      - run:
          name: Wait for db
          command: |
            if [ ! -z "$DATABASE_ADDR" ]; then
              dockerize -wait tcp://$DATABASE_ADDR -timeout 1m
            fi

      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v3-dependencies-
      - *local_venv
      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Unit tests
          command: |
            . venv/bin/activate
            make unittest unittests="$UNITTESTS"
          environment:
            RANDOM_SEED: 10
            PYTHONHASHSEED: 0

db_coverage_test: &db_coverage_test
    steps:
      - checkout

      - run:
          name: Wait for db
          command: |
            if [ ! -z "$DATABASE_ADDR" ]; then
              dockerize -wait tcp://$DATABASE_ADDR -timeout 1m
            fi

      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v3-dependencies-
      - *local_venv
      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Coverage tests
          command: |
            . venv/bin/activate
            unittests="$UNITTESTS" make coverage
            mv .coverage .coverage.$CIRCLE_JOB
          environment:
            RANDOM_SEED: 10
            PYTHONHASHSEED: 0
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .coverage.*

es_unit_test: &es_unit_test
    environment:
      UNITTESTS: tests/test_elastic.py
      ELASTICSEARCH_ADDR: localhost:9200
      DATABASE_ADDR: localhost:9200
    working_directory: ~/repo
    <<: *db_integration_test

mongo_unit_test: &mongo_unit_test
    environment:
      UNITTESTS: tests/test_mongo.py
      MONGODB_DB: localhost:27017
      DATABASE_ADDR: localhost:27017
    working_directory: ~/repo
    <<: *db_integration_test

warp_unit_test: &warp_unit_test
    environment:
      UNITTESTS: tests/test_warp10.py
      WARP10_URL: http://127.0.0.1:8080/api/v0
      WARP10_READ_TOKEN: readTokenCI
      WARP10_WRITE_TOKEN: writeTokenCI
      DATABASE_ADDR: 127.0.0.1:8080
    working_directory: ~/repo
    <<: *db_integration_test

influx_unit_test: &influx_unit_test
    environment:
      UNITTESTS: tests/test_influx.py
      INFLUXDB_ADDR: localhost:8086
      DATABASE_ADDR: localhost:8086
    working_directory: ~/repo
    <<: *db_integration_test

opentsdb_unit_test: &opentsdb_unit_test
    environment:
      UNITTESTS: tests/test_opentsdb.py
      OPENTSDB_ADDR: localhost:4242
      DATABASE_ADDR: localhost:4242
    working_directory: ~/repo
    <<: *db_integration_test

es_coverage_test: &es_coverage_test
    environment:
      UNITTESTS: tests/test_elastic.py
      ELASTICSEARCH_ADDR: localhost:9200
      DATABASE_ADDR: localhost:9200
    working_directory: ~/repo
    <<: *db_coverage_test

mongo_coverage_test: &mongo_coverage_test
    environment:
      UNITTESTS: tests/test_mongo.py
      MONGODB_DB: localhost:27017
      DATABASE_ADDR: localhost:27017
    working_directory: ~/repo
    <<: *db_coverage_test

warp_coverage_test: &warp_coverage_test
    environment:
      UNITTESTS: tests/test_warp10.py
      WARP10_URL: http://127.0.0.1:8080/api/v0
      WARP10_READ_TOKEN: readTokenCI
      WARP10_WRITE_TOKEN: writeTokenCI
      DATABASE_ADDR: 127.0.0.1:8080
    working_directory: ~/repo
    <<: *db_coverage_test

influx_coverage_test: &influx_coverage_test
    environment:
      UNITTESTS: tests/test_influx.py
      INFLUXDB_ADDR: localhost:8086
      DATABASE_ADDR: localhost:8086
    working_directory: ~/repo
    <<: *db_coverage_test


jobs:
  test-elastic7:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:7.3.2
        environment:
          xpack.security.enabled: false
          transport.host: localhost
    <<: *es_unit_test

  test-elastic6:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:6.6.1
    <<: *es_unit_test

  test-elastic5:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:5.6.15
    <<: *es_unit_test

  test-mongo4:
    docker:
      - image: circleci/python:3.6.1
      - image: mongo:4.1.13
    <<: *mongo_unit_test

  test-warp10:
    docker:
      - image: circleci/python:3.6.1
      - image: warp10io/warp10:2.0.3-ci
    <<: *warp_unit_test

  test-influx1:
    docker:
      - image: circleci/python:3.6.1
      - image: influxdb:1.7.4
    <<: *influx_unit_test

  test-opentsdb:
    docker:
      - image: circleci/python:3.6.1
      - image: petergrace/opentsdb-docker
    <<: *opentsdb_unit_test


  coverage-elastic6:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:6.6.1
    <<: *es_coverage_test

  coverage-elastic5:
    docker:
      - image: circleci/python:3.6.1
      - image: elasticsearch:5.6.15
    <<: *es_coverage_test

  coverage-mongo4:
    docker:
      - image: circleci/python:3.6.1
      - image: mongo:4.1.13
    <<: *mongo_coverage_test

  coverage-warp10:
    docker:
      - image: circleci/python:3.6.1
      - image: warp10io/warp10:2.0.3-ci
    <<: *warp_coverage_test

  coverage-influx1:
    docker:
      - image: circleci/python:3.6.1
      - image: influxdb:1.7.4
    <<: *influx_coverage_test


  test-go:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/regel/loudml
    steps:
      - checkout

      - restore_cache:
          key: dep-0.5.0
      - run:
          name: 'Download Go dependencies tool'
          command: |
            cd /tmp
            wget -N https://github.com/golang/dep/releases/download/v0.5.0/dep-linux-amd64
            chmod +x /tmp/dep-linux-amd64
      - save_cache:
          name: 'dep-0.5.0'
          key: dep-0.5.0
          paths:
            - '/tmp/dep'

      - restore_cache:
          key: telemetry-vendor-{{ checksum "telemetry/Gopkg.lock" }}
      - run: 'cd telemetry && /tmp/dep-linux-amd64 ensure -v --vendor-only'
      - save_cache:
          name: 'telemetry vendored deps'
          key: telemetry-vendor-{{ checksum "telemetry/Gopkg.lock" }}
          paths:
            - 'telemetry/vendor'

      - run: 'cd telemetry && make test'

  test-python-unit:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
      - checkout

      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v3-dependencies-
      - *local_venv
      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Unit tests
          command: |
            . venv/bin/activate
            make unittest
          environment:
            RANDOM_SEED: 10
            PYTHONHASHSEED: 0

  test-python-coverage:
    docker:
      - image: circleci/python:3.6.1
    environment:
      UNITTESTS: tests/
    working_directory: ~/repo
    <<: *db_coverage_test

  combine-coverage:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - checkout

      - run:
          name: Install coverage tool
          command: |
            sudo pip install coverage

      - run:
          name: Coverage tests
          command: |
            cd /tmp/workspace
            coverage combine
            coverage xml -i

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - coverage.xml

  test-sonar:
    docker:
      - image: circleci/openjdk:latest
    working_directory: ~/repo
    environment:
      SONAR_VERSION: 4.2.0.1873
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - checkout

      - run:
          name: Install sonar-scanner
          command: |
            sudo apt-get install -y unzip
            sudo apt-get install -y curl
            curl --insecure -O -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_VERSION}-linux.zip
            unzip sonar-scanner-cli-${SONAR_VERSION}-linux.zip

      - run:
          name: Sonar tests
          command: |
            sonar-scanner-${SONAR_VERSION}-linux/bin/sonar-scanner \
              -Dsonar.projectKey=regel_loudml \
              -Dsonar.organization=regel-github \
              -Dsonar.sources=loudml \
              -Dsonar.python.coverage.reportPaths=/tmp/workspace/coverage.xml \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=$SONAR_API_KEY

  deploy_docs:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/tmp
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libpath-tiny-perl libdigest-perl-md5-perl libxml2-utils xsltproc
      - add_ssh_keys:
          fingerprints:
            - "fe:f4:5e:6b:19:bc:81:6d:19:0c:ae:76:39:a0:c1:ff"
      - run:
          name: Clone loudml-docs repo
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            git clone git@github.com:regel/loudml-docs
      - run:
          name: Build and commit
          command: |
            cd loudml-docs
            ./build_docs.pl --all
            git config user.email "packaging@loudml.io"
            git config user.name "circleci"
            git checkout -B ${CIRCLE_BRANCH}
            git add html
            if LC_ALL=C git status|grep "Untracked files\|modified"; then
              git commit -m "Update html. Deployed to netlify.com"
              if [ "$CIRCLE_BRANCH" != "master" ]; then
                git push -f origin ${CIRCLE_BRANCH}
              else
                git push origin master
              fi
            fi
            zip -r html.zip html
      - store_artifacts:
          path: ~/tmp/loudml-docs/html.zip
          destination: html.zip


  build:
    parameters:
      extras_require:
        type: string
      base_image:
        type: string
      gpu:
        type: string
    working_directory: /app
    docker:
      - image: docker:18.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - *restore_cache
      - *docker_load
      - *docker_build
      - *docker_save
      - *save_cache

  deploy:
    parameters:
      extras_require:
        type: string
      base_image:
        type: string
      gpu:
        type: string
      tag:
        type: string
      release:
        type: boolean
        default: false
    docker:
      - image: docker:18.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - *restore_cache
      - *docker_load
      - *docker_build
      - *docker_save
      - *save_cache
      - run: |
          echo "${DOCKER_PASSWORD}" | \
              docker login -u "${DOCKER_ID_USER}" --password-stdin
          docker tag app loudml/loudml:<< parameters.tag >>
          docker push loudml/loudml:<< parameters.tag >>
      - when:
          condition: << parameters.release >>
          steps:
            - run: |
                docker tag app loudml/loudml:${CIRCLE_SHA1:0:7}
                docker push loudml/loudml:${CIRCLE_SHA1:0:7}
                docker tag app loudml/loudml:${CIRCLE_TAG}
                docker push loudml/loudml:${CIRCLE_TAG}

  debuild_stretch:
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/debuild
    steps:
      - build_deb:
          distro: stretch

  debuild_buster:
    docker:
      - image: circleci/buildpack-deps:buster
    working_directory: ~/debuild
    steps:
      - build_deb:
          distro: buster

  debuild_xenial:
    docker:
      - image: ubuntu:xenial
    working_directory: ~/debuild
    steps:
      - run:
          name: apt-get install sudo equivs
          command: apt-get update && apt-get -y install sudo equivs
      - build_deb:
          distro: xenial

  debuild_bionic:
    docker:
      - image: ubuntu:bionic
    working_directory: ~/debuild
    steps:
      - run:
          name: apt-get install sudo equivs
          command: apt-get update && apt-get -y install sudo equivs
      - run:
          name: tzdata
          command: |
            ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
            DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
      - build_deb:
          distro: bionic

  publish_debs:
    executor: ruby
    steps:
      - publish_deb:
          os: debian
          distro: stretch
      - publish_deb:
          os: debian
          distro: buster
      - publish_deb:
          os: ubuntu
          distro: xenial
      - publish_deb:
          os: ubuntu
          distro: bionic

